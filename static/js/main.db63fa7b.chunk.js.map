{"version":3,"sources":["logo.svg","App.js","../index.js","reportWebVitals.js","index.js"],"names":["Toxicity","predictions","style","margin","map","label","match","probability","App","useState","value","setValue","text","threshold","delay","setPredictions","model","useRef","predict","a","current","toxicity","classify","catch","result","prediction","results","probabilities","toFixed","useEffect","timeout","setTimeout","clearTimeout","useTextToxicity","className","width","height","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAAe,I,0CCMf,SAASA,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,YACZC,EAAQ,CAAEC,OAAQ,IAExB,OAAKF,EAGH,qBAAKC,MAAOA,EAAZ,SACGD,EAAYG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,YAAjB,OACf,qBAAKL,MAAO,CAAEC,OAAQ,GAAtB,mBACME,EADN,cACiBE,EADjB,cACkCD,EAAQ,eAAO,iBADjBD,QALb,qBAAKH,MAAOA,EAAZ,oCAyCZM,MA3Bf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMV,ECtBO,SACbW,GAEA,6DADoC,GACpC,IADEC,iBACF,MADc,GACd,MADmBC,aACnB,MAD2B,IAC3B,EACA,EAAsCL,mBAAS,MAA/C,mBAAOR,EAAP,KAAoBc,EAApB,KACMC,EAAQC,mBAFd,SAIeC,IAJf,2EAIA,4BAAAC,EAAA,yDACOP,EADP,yDAEkBI,EAAMI,QAFxB,qCAE0CC,MAF1C,iCAEEL,EAAMI,QAFR,eAGuBJ,EAAMI,QAAQE,SAAS,CAACV,IAAOW,OAAM,eAH5D,WAGQC,EAHR,0DAOET,EACES,EAAOpB,KAAI,SAACqB,GACV,kBAAmCA,EAAWC,QAA9C,MAASpB,EAAT,EAASA,MAAOqB,EAAhB,EAAgBA,cAChB,MAAO,CACLtB,MAAOoB,EAAWpB,MAClBC,QACAqB,gBACApB,aAAiC,IAAnBoB,EAAc,IAAUC,QAAQ,GAAK,SAd3D,6CAJA,sBA6BA,OALAC,qBAAU,WACR,IAAMC,EAAUC,WAAWb,EAASJ,GACpC,OAAO,kBAAMkB,aAAaF,MACzB,CAACjB,EAAWD,EAAME,IAEdb,EDVagC,CAAgBvB,GAEpC,OACE,sBAAKwB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,8EAKF,sBAAKA,UAAU,aAAf,UACE,gCACE,wDACA,0BACEhC,MAAO,CAAEiC,MAAO,IAAKC,OAAQ,KAC7B1B,MAAOA,EACP2B,SAAU,SAACC,GAAD,OAAO3B,EAAS2B,EAAEC,OAAO7B,aAGtCA,GAAS,cAACV,EAAD,CAAUC,YAAaA,WEhC1BuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db63fa7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './App.css';\r\nimport logo from './logo.svg';\r\nimport React, { Fragment, useState } from \"react\";\r\nimport useTextToxicity from \"text-toxicity-tfjs\";\r\n\r\n\r\nfunction Toxicity({ predictions }) {\r\n  const style = { margin: 10 };\r\n\r\n  if (!predictions) return <div style={style}>Loading predictions...</div>;\r\n\r\n  return (\r\n    <div style={style}>\r\n      {predictions.map(({ label, match, probability }) => (\r\n        <div style={{ margin: 5 }} key={label}>\r\n          {`${label} - ${probability} - ${match ? \"☣️\" : \"❤️\"}`}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState(\"\");\r\n  const predictions = useTextToxicity(value);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Demo tfjs Classifier Running in the Browser\r\n        </p>\r\n        \r\n      </header>\r\n      <div className=\"Classifier\">\r\n        <div>\r\n          <div>Write an example here</div>\r\n          <textarea\r\n            style={{ width: 500, height: 100 }}\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n          />\r\n        </div>\r\n        {value && <Toxicity predictions={predictions} />}\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport * as toxicity from \"@tensorflow-models/toxicity\";\r\n\r\nexport default function useTextToxicity(\r\n  text,\r\n  { threshold = 0.9, delay = 2000 } = {}\r\n) {\r\n  const [predictions, setPredictions] = useState(null);\r\n  const model = useRef();\r\n\r\n  async function predict() {\r\n    if (!text) return;\r\n    model.current = model.current || (await toxicity.load());\r\n    const result = await model.current.classify([text]).catch(() => {});\r\n\r\n    if (!result) return;\r\n\r\n    setPredictions(\r\n      result.map((prediction) => {\r\n        const [{ match, probabilities }] = prediction.results;\r\n        return {\r\n          label: prediction.label,\r\n          match,\r\n          probabilities,\r\n          probability: (probabilities[1] * 100).toFixed(2) + \"%\",\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(predict, delay);\r\n    return () => clearTimeout(timeout);\r\n  }, [threshold, text, delay]);\r\n\r\n  return predictions;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}